pragma solidity ^0.4.16;

contract Token{
  
  uint256 public totalSupply;

    function balanceOf(address _owner) public constant returns (uint256 balance);
    function transfer(address _to, uint256 _value) public returns (bool success);
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);
    function approve(address _spender, uint256 _value) public returns (bool success);
    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);

   event Transfer(address indexed _from, address indexed _to, uint256 _value);
   event Approval(address indexed _owner, address indexed _spender, uint256 _value);

}

contract TokenDemo is Token {
    string public name;                   //名称，例如"My test token"
    uint8 public decimals;               //返回token使用的小数点后几位。比如如果设置为3，就是支持0.001表示.
    string public symbol;               //token简称,like MTT

	//构造函数，主要设置代币初始情况，在部署合约时输入所需参数(也可以修改成直接定义)
    function TokenDemo(uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol) public {
       totalSupply = _initialAmount * 10 ** uint256(_decimalUnits);         // 设置初始总量
       balances[msg.sender] = totalSupply; // 初始token数量给予消息发送者，因为是构造函数，所以这里也是合约的创建者
      
       name = _tokenName; 
       decimals = _decimalUnits;
       symbol = _tokenSymbol;
    }
	
	//余额：查询_owner账户的余额
	function balanceOf(address _owner) public constant returns (uint256 balance) {
        return balances[_owner];    
	}

	//转账：从消息发送者账户转账_value到_to账户
	function transfer(address _to, uint256 _value) public returns (bool success) {
        //默认totalSupply 不会超过最大值 (2^256 - 1).
       //如果随着时间的推移将会有新的token生成，则可以用下面这句避免溢出的异常
        require(balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]);
        require(_to != 0x0);

        balances[msg.sender] -= _value;//从消息发送者账户中减去token数量_value
        balances[_to] += _value;//往接收账户增加token数量_value

        Transfer(msg.sender, _to, _value);//触发转币交易事件
        return true;
    }
	
	
	//允许_spender从消息发送者账户提取数量_value的代币
	function approve(address _spender, uint256 _value) public returns (bool success){ 
        allowed[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);//触发Approve事件
 
        return true;   
	}
  
	//允许_spender从_owner中转出的token数
	function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {
        return allowed[_owner][_spender];
	}

	//转账：从消息发送者授权给_from账户余额转账_value到_to账户（需要先用approve函数进行对from的授权操作）
	//allowence与transferFrom结合，可以完成如“使用代币来支付服务”等功能
	function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
		 //条件检测
        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);
		require(_to != 0x0);
		
        balances[_to] += _value;//接收账户增加token数量_value
        balances[_from] -= _value; //支出账户_from减去token数量_value
        allowed[_from][msg.sender] -= _value;//消息发送者可以从账户_from中转出的数量减少_value

        Transfer(_from, _to, _value);//触发转币交易事件
        return true;   
	}
   
     mapping (address => uint256) balances;  //将地址映射到余额 
     mapping (address => mapping (address => uint256)) allowed; //映射：帐户的所有者批准将金额转入另一个帐户
}





